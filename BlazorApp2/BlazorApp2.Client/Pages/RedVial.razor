@page "/RedVial"
@using BlazorApp2.Share;
@using System.Diagnostics
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JSRuntime

<PageTitle>Red Vial</PageTitle>

<h1>Red Vial</h1>

<div class="mb-3">
    <button class="btn btn-success me-2" @onclick="IniciarSimulacion">Iniciar Simulación</button>
    <button class="btn btn-danger" @onclick="DetenerSimulacion">Detener Simulación</button>
</div>

<div class="d-flex flex-row align-items-start gap-4">
    <canvas @ref="mapaCanvasRef" width="600" height="600"
            style="border:1px solid #000; background-color:#f0f0f0;"></canvas>

    @if (vehiculos.Any())
    {
        <table class="table table-striped w-auto">
            <thead>
                <tr>
                    <th>Vehículo</th>
                    <th>Intersección Anterior</th>
                    <th>Intersección Actual</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var vehiculo in vehiculos)
                {
                    var rowClass = vehiculo.SeMovio ? "table-warning" : "";
                    <tr class="@rowClass">
                        <td>@vehiculo.Id</td>
                        <td>@vehiculo.NodoAnterior</td>
                        <td>@vehiculo.NodoActual.Informacion</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>




<select @bind="valorInicio" class="form-select" aria-label="Seleccione el Nodo Inicial" required>
    <option value="" disabled selected hidden>Nodo Inicial...</option>
    <option value="1">Interseccion 1</option>
    <option value="2">Interseccion 2</option>
    <option value="3">Interseccion 3</option>
    <option value="4">Interseccion 4</option>
    <option value="5">Interseccion 5</option>
    <option value="6">Interseccion 6</option>
    <option value="7">Interseccion 7</option>
    <option value="8">Interseccion 8</option>
    <option value="9">Interseccion 9</option>
</select>

<select @bind="valorFinal" class="form-select" aria-label="Seleccione el Nodo Final" required>
    <option value="" disabled selected hidden>Nodo Final...</option>
    <option value="1">Interseccion 1</option>
    <option value="2">Interseccion 2</option>
    <option value="3">Interseccion 3</option>
    <option value="4">Interseccion 4</option>
    <option value="5">Interseccion 5</option>
    <option value="6">Interseccion 6</option>
    <option value="7">Interseccion 7</option>
    <option value="8">Interseccion 8</option>
    <option value="9">Interseccion 9</option>
</select>

<button class="btn btn-primary" @onclick="BuscarNodo">Buscar Nodo</button>
<button @onclick="DibujarMapaEnCanvasDesdeBlazor">Dibujar Mapa</button>
<p>@resultado</p>

<p>@estadoH</p>
<p>@estadoV</p>







@code {
    private ElementReference mapaCanvasRef;
    public string valorInicio = "";
    public string valorFinal = "";

    private List<Vehiculo> vehiculos = new();
    private bool simulacionActiva = false;
    private System.Timers.Timer? temporizador;
    private Random aleatorio = new();

    private IJSObjectReference? module;

    public Nodo nodo1 = new Nodo();
    public Nodo nodo2 = new Nodo(); 
    public Nodo nodo3 = new Nodo();
    public Nodo nodo4 = new Nodo();
    public Nodo nodo5 = new Nodo();
    public Nodo nodo6 = new Nodo();
    public Nodo nodo7 = new Nodo();
    public Nodo nodo8 = new Nodo();
    public Nodo nodo9 = new Nodo();
    private Nodo NodoInicio => nodo1;
    string resultado = "";
    bool estadoV;
    bool estadoH;

    protected override async Task OnInitializedAsync()
    {
        _ = Semaforo.IniciarSemaforo();
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/map.js");
                Console.WriteLine("Módulo JavaScript cargado correctamente");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al cargar módulo JS: {ex.Message}");
            }
        }
    }


    protected override void OnInitialized()
    {
        estadoV= Semaforo.EstadoVertical;
        estadoH = Semaforo.EstadoHorizontal;
        Semaforo.OnEstadoChanged += Actualizar;

        //NODO 1
        nodo1.ReferenciaDerecha = nodo2;
        nodo1.Informacion = "-1-";
        nodo1.TieneSemaforo = false;

        nodo1.viaDerecha = true;
        nodo1.viaIzquierda = false;
        nodo1.viaArriba = false;
        nodo1.viaAbajo = false;

        nodo1.ConteoActualVehiculos = 10;

        //NODO 2
        nodo2.ReferenciaDerecha = nodo3;
        nodo2.ReferenciaAbajo = nodo5;
        nodo2.TieneSemaforo = true;

        nodo2.viaDerecha = true;
        nodo2.viaIzquierda = false;
        nodo2.viaArriba = false;
        nodo2.viaAbajo = true;

        nodo2.Informacion = "-2-";

        //NODO 3
        nodo3.ReferenciaAbajo = nodo6;
        nodo3.Informacion = "-3-";
        nodo3.TieneSemaforo = false;

        nodo3.viaDerecha = false;
        nodo3.viaIzquierda = false;
        nodo3.viaArriba = false;
        nodo3.viaAbajo = true;

        //Nodo 4
        nodo4.ReferenciaDerecha = nodo5;
        nodo4.ReferenciaArriba = nodo1;
        nodo4.Informacion = "-4-";
        nodo4.TieneSemaforo = true;

        nodo4.viaDerecha = true;
        nodo4.viaIzquierda = false;
        nodo4.viaArriba = true;
        nodo4.viaAbajo = false;

        //Nodo 5
        nodo5.ReferenciaDerecha = nodo6;
        nodo5.ReferenciaIzquierda = nodo4;
        nodo5.ReferenciaAbajo = nodo8;
        nodo5.ReferenciaArriba = nodo2;
        nodo5.Informacion = "-5-";
        nodo5.TieneSemaforo = true;

		nodo5.viaDerecha = true;
        nodo5.viaIzquierda = true;
        nodo5.viaArriba = true;
        nodo5.viaAbajo = true;

        //Nodo 6
        nodo6.ReferenciaAbajo = nodo9;
        nodo6.ReferenciaIzquierda = nodo5;
        nodo6.Informacion = "-6-";
        nodo6.TieneSemaforo = true;

        nodo6.viaDerecha = false;
        nodo6.viaIzquierda = true;
        nodo6.viaArriba = false;
        nodo6.viaAbajo = true;

        //Nodo 7
        nodo7.ReferenciaArriba = nodo4;
        nodo7.Informacion = "-7-";
        nodo7.TieneSemaforo = false;

        nodo7.viaDerecha = false;
        nodo7.viaIzquierda = false;
        nodo7.viaArriba = true;
        nodo7.viaAbajo = false;

        //Nodo 8
        nodo8.ReferenciaIzquierda = nodo7;
        nodo8.ReferenciaArriba = nodo5;
        nodo8.TieneSemaforo = true;
        nodo8.Informacion = "-8-";

        nodo8.viaDerecha = false;
        nodo8.viaIzquierda = true;
        nodo8.viaArriba = true;
        nodo8.viaAbajo = false;

        //Nodo 9
        nodo9.ReferenciaIzquierda = nodo8;
        nodo9.Informacion = "-9-";
        nodo9.TieneSemaforo = false;

        nodo9.viaDerecha = false;
        nodo9.viaIzquierda = true;
        nodo9.viaArriba = false;
        nodo9.viaAbajo = false;

        nodo1.PosX = 100; nodo1.PosY = 100;
        nodo2.PosX = 300; nodo2.PosY = 100;
        nodo3.PosX = 500; nodo3.PosY = 100;

        nodo4.PosX = 100; nodo4.PosY = 300;
        nodo5.PosX = 300; nodo5.PosY = 300;
        nodo6.PosX = 500; nodo6.PosY = 300;

        nodo7.PosX = 100; nodo7.PosY = 500;
        nodo8.PosX = 300; nodo8.PosY = 500;
        nodo9.PosX = 500; nodo9.PosY = 500;
    }

    private void Actualizar()
    {
        estadoV = Semaforo.EstadoVertical;
        estadoH = Semaforo.EstadoHorizontal;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Semaforo.OnEstadoChanged -= Actualizar;
    }



    private async Task DibujarMapaEnCanvasDesdeBlazor()
    {
        try
        {
            Console.WriteLine("Iniciando dibujo del mapa...");

            if (module == null)
            {
                Console.WriteLine("Módulo JS no cargado, intentando cargar...");
                module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/map.js");
            }

            var canvasExists = await JSRuntime.InvokeAsync<bool>("eval",
                "document.contains(document.querySelector('canvas'))");

            if (!canvasExists)
            {
                Console.WriteLine("Error: Elemento canvas no encontrado en el DOM");
                return;
            }

            await module.InvokeVoidAsync("limpiarCanvas", mapaCanvasRef);
            Console.WriteLine("Canvas limpiado");


            var nodos = new[] { nodo1, nodo2, nodo3, nodo4, nodo5, nodo6, nodo7, nodo8, nodo9 };

            await DibujarConexiones();

            foreach (var nodo in nodos)
            {
                await DibujarNodoEnCanvas(nodo);
            }


            

            Console.WriteLine("Mapa dibujado completamente");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al dibujar mapa: {ex.Message}");
        }
    }
    private async Task DibujarNodoEnCanvas(Nodo nodo)
    {

        var options = new JsonSerializerOptions
            {
                ReferenceHandler = ReferenceHandler.Preserve
            };


        Nodo[] nodos = { nodo };
        var nodoInfo = JsonSerializer.Serialize(nodos, options);
        await module.InvokeVoidAsync("dibujarNodoIndividual", mapaCanvasRef, nodoInfo);
    }

    private async Task DibujarCalleEnCanvas(Nodo desde, Nodo hasta, bool EsInterseccion)
    {
        var options = new JsonSerializerOptions
            {
                ReferenceHandler = ReferenceHandler.Preserve
            };

        var calleInfo = new
        {
            DesdeX = desde.PosX,
            DesdeY = desde.PosY,
            HastaX = hasta.PosX,
            HastaY = hasta.PosY,
            ConteoActualVehiculos = desde.ConteoActualVehiculos,
            Informacion2 = hasta.Informacion.ToString(),
            Informacion1 = desde.Informacion.ToString(),
            EsInterseccion = EsInterseccion
    };
        
        object[] nodos = { calleInfo }
        ;
        var calle = JsonSerializer.Serialize(nodos, options);

        if (hasta != null)
        {

            await module.InvokeVoidAsync("dibujarCalleIndividual", mapaCanvasRef, calle);
        }
    }
    private async Task DibujarConexiones()
    {
    var conexiones = new List<(Nodo, Nodo, bool)>
    {
        (nodo1, nodo1.ReferenciaDerecha, false),
        (nodo2, nodo2.ReferenciaDerecha, false),
        (nodo2, nodo2.ReferenciaAbajo, false),
        (nodo3, nodo3.ReferenciaAbajo, false),
        (nodo4, nodo4.ReferenciaDerecha, false),
        (nodo4, nodo4.ReferenciaArriba, false),

        (nodo5, nodo5.ReferenciaDerecha, true),
        (nodo5, nodo5.ReferenciaIzquierda, true),
        (nodo5, nodo5.ReferenciaArriba, true),
        (nodo5, nodo5.ReferenciaArriba, true),

        (nodo5, nodo5.ReferenciaDerecha, false),
        (nodo5, nodo5.ReferenciaIzquierda, false),
        (nodo5, nodo5.ReferenciaArriba, false),
        (nodo5, nodo5.ReferenciaArriba, false),

        (nodo5, nodo5.ReferenciaAbajo,false),
        (nodo6, nodo6.ReferenciaIzquierda,false),
        (nodo6, nodo6.ReferenciaAbajo,false),
        (nodo7, nodo7.ReferenciaArriba,false),
        (nodo8, nodo8.ReferenciaIzquierda,false),
        (nodo8, nodo8.ReferenciaArriba,false),
        (nodo9, nodo9.ReferenciaIzquierda,false)
    };

    foreach (var (desde, hasta, EsCentral) in conexiones)
    {
        if (hasta != null)
        {
                await DibujarCalleEnCanvas(desde, hasta, EsCentral);
        }
    }
}
    

    public void BuscarNodo() {
        Nodo inicial = ObtenerNodoPorValor(valorInicio);
        Nodo final = ObtenerNodoPorValor(valorFinal);
        int pasos = Nodo.Buscar(inicial, final);
        resultado = pasos >= 0 ? $"Ruta encontrada en {pasos} pasos" : "Ruta no encontrada";
    }

    public Nodo ObtenerNodoPorValor(string valor)
    {
        return valor switch
        {
            "1" => nodo1,
            "2" => nodo2,
            "3" => nodo3,
            "4" => nodo4,
            "5" => nodo5,
            "6" => nodo6,
            "7" => nodo7,
            "8" => nodo8,
            "9" => nodo9,
            _ => null
        };
    }

    

    public void CircularVehiculos(){
       
    }


    private void IniciarSimulacion()
    {
        if (simulacionActiva)
            return;

        simulacionActiva = true;
        InicializarVehiculos(10); // Puedes ajustar el número de vehículos

        temporizador = new System.Timers.Timer(1000); // Intervalo de 1 segundo
        temporizador.Elapsed += (sender, args) =>
        {
            if (simulacionActiva)
            {
                MoverVehiculos();
                InvokeAsync(StateHasChanged);
            }
        };
        temporizador.Start();
    }

    private void DetenerSimulacion()
    {
        simulacionActiva = false;
        temporizador?.Stop();
        temporizador?.Dispose();
    }

    private void InicializarVehiculos(int cantidad)
    {
        vehiculos.Clear();
        var nodosDisponibles = ObtenerTodosLosNodos();
        for (int i = 0; i < cantidad; i++)
        {
            var nodoInicial = nodosDisponibles[aleatorio.Next(nodosDisponibles.Count)];
            vehiculos.Add(new Vehiculo { Id = i + 1, NodoActual = nodoInicial });
        }
    }

    private void MoverVehiculos()
    {
        foreach (var vehiculo in vehiculos)
        {
            var nodo = vehiculo.NodoActual;
            var direcciones = new List<Nodo?>
            {
                nodo.ReferenciaArriba,
                nodo.ReferenciaAbajo,
                nodo.ReferenciaIzquierda,
                nodo.ReferenciaDerecha
            }.Where(n => n != null).ToList();

            if (direcciones.Count == 0)
                continue;

            var siguienteNodo = direcciones[aleatorio.Next(direcciones.Count)];

            if (siguienteNodo != null)
            {
                // Simular semáforo: si tiene semáforo y está en rojo, el vehículo espera
                if (siguienteNodo.TieneSemaforo && aleatorio.Next(2) == 0) // 50% de probabilidad de estar en rojo
                {
                    continue;
                }

                vehiculo.NodoAnterior = vehiculo.NodoActual.Informacion?.ToString() ?? "";
                vehiculo.NodoActual = siguienteNodo;
                vehiculo.SeMovio = true;
                _ = Task.Run(async () =>
                {
                await Task.Delay(900); // un poco antes del próximo tick
                    vehiculo.SeMovio = false;
                });
            }
        }
    }

  
    private List<Nodo> ObtenerTodosLosNodos()
    {
        var nodos = new List<Nodo>();
        var visitados = new HashSet<Nodo>();
        var cola = new Queue<Nodo>();

        if (NodoInicio != null)
        {
            cola.Enqueue(NodoInicio);
            visitados.Add(NodoInicio);
        }

        while (cola.Count > 0)
        {
            var actual = cola.Dequeue();
            nodos.Add(actual);

            var vecinos = new List<Nodo?>
            {
                actual.ReferenciaArriba,
                actual.ReferenciaAbajo,
                actual.ReferenciaIzquierda,
                actual.ReferenciaDerecha
            };

            foreach (var vecino in vecinos)
            {
                if (vecino != null && !visitados.Contains(vecino))
                {
                    visitados.Add(vecino);
                    cola.Enqueue(vecino);
                }
            }
        }

        return nodos;
    }

    /*private class Vehiculo
    {
        public int Id { get; set; }
        public Nodo NodoActual { get; set; } = null!;
    }*/

}
